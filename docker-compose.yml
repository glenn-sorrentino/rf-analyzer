services:
  hackrf-sweep:
    image: debian:stable-slim
    profiles: ["sweep"]
    privileged: true
    network_mode: host
    restart: unless-stopped
    devices:
      - /dev/bus/usb:/dev/bus/usb
    volumes:
      - /mnt/iqdata:/mnt/iqdata
    command: >
      bash -lc "
        set -euo pipefail;
        export DEBIAN_FRONTEND=noninteractive;
        apt-get update -qq &&
        apt-get install -y --no-install-recommends -qq hackrf coreutils gawk &&
        mkdir -p /mnt/iqdata/sweeps;
        N_KEEP=20160;  # minutes (~14 days)
        while true; do
          ts=$$(date -u +%Y%m%dT%H%M%SZ);
          raw=/mnt/iqdata/sweeps/sweep_$${ts}.csv;
          lite=/mnt/iqdata/sweeps/sweep_$${ts}_lite.csv;
          echo '>> sweep' $$ts;
          # ~100 kHz resolution bins across 1–6000 MHz (Hz units in -f)
          timeout 60 hackrf_sweep -f 1:6000 -w 100000 -a 1 -l 32 -g 24 -r $$raw || true;
          # Summarize each 5 MHz slice -> ts,low,high,bin_width,num_bins,peak_hz,peak_db,mean_db
          awk -F', *' '{
            low=$$3+0; high=$$4+0; bw=$$5+0;
            max=-1e9; idx=-1; sum=0; cnt=0;
            for(i=7;i<=NF;i++){v=$$i+0; sum+=v; cnt++; if(v>max){max=v; idx=i-7}}
            if(cnt>0){
              peak_hz=low + (idx+0.5)*bw; mean=sum/cnt;
              printf \"%sT%sZ,%.0f,%.0f,%.2f,%d,%.0f,%.2f,%.2f\\n\", $$1, $$2, low, high, bw, cnt, peak_hz, max, mean;
            }
          }' $$raw > $$lite;
          # keep last ~14 days
          ls -1tr /mnt/iqdata/sweeps/sweep_*.csv | head -n -$$N_KEEP | xargs -r rm -f;
          ls -1tr /mnt/iqdata/sweeps/sweep_*_lite.csv | head -n -$$N_KEEP | xargs -r rm -f;
        done
      "

  hackrf-trigger:
    image: debian:stable-slim
    container_name: hackrf-trigger
    devices:
      - /dev/bus/usb:/dev/bus/usb
    volumes:
      - /mnt/iqdata:/data
    restart: unless-stopped
    profiles: ["trigger"]
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq &&
        apt-get install -y --no-install-recommends -qq coreutils gawk hackrf
        mkdir -p /data/watch
        THRESHOLD_DB=-30
        rate=8000000
        N_KEEP=20160
        while true; do
          latest=$$(ls -1t /data/sweeps/*_lite.csv 2>/dev/null | head -n1 || true)
          [ -z "$$latest" ] && sleep 5 && continue
          # Read peak_hz ($7) and peak_db ($8) directly from the lite file; pick the strongest in 1.6–1.7 GHz
          best_line=$$(awk -F', *' '($$3+0>=1600000000)&&($$4+0<=1700000000){printf "%.0f %.2f\n", $$7+0, $$8+0}' "$$latest" \
                       | sort -k2,2nr | head -n1)
          peak_hz=$$(echo "$$best_line" | awk '{print $$1}')
          peak_db=$$(echo "$$best_line" | awk '{print $$2}')
          [ -z "$$peak_db" ] && sleep 5 && continue
          awk -v p="$$peak_db" -v t="$$THRESHOLD_DB" 'BEGIN{exit (p>t)?0:1}' && {
            ts=$$(date -u +%Y%m%dT%H%M%SZ)
            center=$$(printf '%.0f' "$$peak_hz")
            out=/data/watch/trigger_$${ts}_$${center}.iq
            echo "Trigger: peak $$peak_db dB at $$center Hz — recording $$out"
            hackrf_transfer -r - -f "$$center" -s "$$rate" -a 1 -l 32 -g 24 -b 10000000 \
              -n $$(( $$rate*2*60 )) > "$$out" || true
            find /data/watch -type f -name 'trigger_*.iq' -printf '%T+ %p\n' \
              | sort | head -n -$$N_KEEP | cut -d' ' -f2- | xargs -r rm -f
          }
          sleep 5
        done
