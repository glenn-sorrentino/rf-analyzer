services:
  openwebrx:
    image: jketterl/openwebrx-full:latest
    profiles: ["webui"]
    container_name: openwebrx
    privileged: true
    # REMOVE USB MAPPING HERE
    ports:
      - "8073:8073"
    volumes:
      - ./openwebrx_data:/var/lib/openwebrx
    restart: unless-stopped
    environment:
      OWX_ADMIN_ENABLED: "true"

  connector:
    build:
      context: .
      dockerfile: Dockerfile.connector
    profiles: ["webui"]
    container_name: owrx-connector
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    network_mode: "service:openwebrx"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","ss -lnt | grep -q ':35397 '"]
      interval: 5s
      timeout: 3s
      retries: 40
      start_period: 25s

  autotuner:
    build:
      context: .
      dockerfile: Dockerfile.autotuner
    profiles: ["webui"]
    depends_on:
      connector:
        condition: service_healthy
    network_mode: "service:openwebrx"
    restart: unless-stopped
    environment:
      SWEEP_URL: "http://100.122.45.119:8088/peak"
      MIN_DB: "-70"
      CONTROL_PORT: "35397"
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        echo "[autotuner] sweep via HTTP; tuning via connector control socket"
        send_try(){ host="$1";port="$2";hz="$3"; for p in "FREQ $${hz}\n" "SET FREQ $${hz}\n" "set frequency $${hz}\n" "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\n" "FREQ $${hz}\r\n" "SET FREQ $${hz}\r\n" "set frequency $${hz}\r\n" "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\r\n"; do printf '%b' "$$p"|timeout 2 socat - TCP4:$$host:$$port,connect-timeout=2 >/dev/null 2>&1 && return 0; done; return 1; }
        for i in $$(seq 1 90); do ss -lnt | grep -q ':35397 ' && break || sleep 1; done
        echo "[autotuner] control socket: 127.0.0.1:$${CONTROL_PORT}"
        while :; do
          resp="$$(curl -fsSL "$${SWEEP_URL}" || true)"
          PHZ="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .peak_hz // empty')"
          PDB="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .max_db  // empty')"
          if [ -n "$${PHZ}" ] && [ -n "$${PDB}" ] && [ "$$(echo "$${PDB} > $${MIN_DB:- -70}" | bc -l 2>/dev/null || echo 0)" -eq 1 ]; then
            send_try 127.0.0.1 "$${CONTROL_PORT}" "$${PHZ}" && echo "[autotuner] tuned -> $${PHZ} Hz (peak $${PDB} dB)" || echo "[autotuner] send failed"
          fi
          sleep 60
        done
