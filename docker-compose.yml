services:
  openwebrx:
    image: jketterl/openwebrx-full:latest
    profiles: ["webui"]
    container_name: openwebrx
    privileged: true
    ports:
      - "8073:8073"
    volumes:
      - ./openwebrx_data:/var/lib/openwebrx
    restart: unless-stopped
    environment:
      OWX_ADMIN_ENABLED: "true"

  connector:
    build:
      context: .
      dockerfile: Dockerfile.connector   # must install: owrx-connector, soapysdr-tools, soapysdr0.7-module-hackrf, hackrf
    profiles: ["webui"]
    container_name: owrx-connector
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    network_mode: "service:openwebrx"
    restart: unless-stopped
    # run the package’s binary directly — no env interpolation risk
    entrypoint: ["/usr/bin/soapy_connector"]
    healthcheck:
      test: ["CMD-SHELL","pidof soapy_connector >/dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 40
      start_period: 25s

  autotuner:
    build:
      context: .
      dockerfile: Dockerfile.autotuner
    profiles: ["webui"]
    depends_on:
      connector:
        condition: service_healthy
    network_mode: "service:openwebrx"
    restart: unless-stopped
    environment:
      SWEEP_URL: "http://100.122.45.119:8088/peak"
      MIN_DB: "-70"
      CONTROL_PORT: ""   # leave empty; we auto-probe
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        echo "[autotuner] sweep via HTTP; auto-probing connector control socket"

        send_try() {
          local host="$$1" port="$$2" hz="$$3"
          for payload in \
            "FREQ $${hz}\n" \
            "SET FREQ $${hz}\n" \
            "set frequency $${hz}\n" \
            "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\n" \
            "FREQ $${hz}\r\n" \
            "SET FREQ $${hz}\r\n" \
            "set frequency $${hz}\r\n" \
            "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\r\n"
          do
            printf '%b' "$${payload}" | timeout 2 socat - TCP4:$${host}:$${port},connect-timeout=2 >/dev/null 2>&1 && return 0
          done
          return 1
        }

        probe_port() {
          awk 'NR>1{split($$2,a,":"); ip=a[1]; p=strtonum("0x"a[2]); s=$$4; if(ip=="0100007F" && s=="0A") print p}' /proc/net/tcp \
          | sort -n \
          | grep -Ev '^(22|80|443|8073)$' \
          | while read -r p; do
              if printf "FREQ 100000000\n" | timeout 1 socat - TCP4:127.0.0.1:$${p},connect-timeout=1 >/dev/null 2>&1; then
                echo "$${p}"; return 0
              fi
              if printf '{"cmd":"nop"}\n' | timeout 1 socat - TCP4:127.0.0.1:$${p},connect-timeout=1 >/dev/null 2>&1; then
                echo "$${p}"; return 0
              fi
            done
          return 1
        }

        for i in $$(seq 1 60); do curl -fsS http://127.0.0.1:8073 >/dev/null 2>&1 && break || sleep 1; done

        HOST=127.0.0.1
        PORT="$${CONTROL_PORT:-}"
        if [ -z "$${PORT}" ]; then PORT="$$(probe_port || true)"; fi
        if [ -n "$${PORT}" ]; then
          echo "[autotuner] control socket candidate: $${HOST}:$${PORT}"
        else
          echo "[autotuner] no control socket yet; will keep probing"
        fi

        while :; do
          resp="$$(curl -fsSL "$${SWEEP_URL}" || true)"
          PHZ="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .peak_hz // empty')"
          PDB="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .max_db  // empty')"

          if [ -n "$${PHZ}" ] && [ -n "$${PDB}" ]; then
            ok="$$(echo "$${PDB} > $${MIN_DB:- -70}" | bc -l 2>/dev/null || echo 0)"
            if [ "$${ok}" -eq 1 ]; then
              if [ -z "$${PORT}" ]; then PORT="$$(probe_port || true)"; fi
              if [ -n "$${PORT}" ] && send_try "$${HOST}" "$${PORT}" "$${PHZ}"; then
                echo "[autotuner] tuned $${HOST}:$${PORT} -> $${PHZ} Hz (peak $${PDB} dB)"
              else
                echo "[autotuner] send failed; re-probing ports"
                PORT=""
              fi
            else
              echo "[autotuner] weak peak ($${PDB} dB < $${MIN_DB:- -70})"
            fi
          else
            echo "[autotuner] waiting for valid sweep JSON"
          fi
          sleep 60
        done

  sweep-publisher:
    image: python:3.11-slim
    profiles: ["sweep"]
    network_mode: host
    restart: unless-stopped
    volumes:
      - /mnt/iqdata:/mnt/iqdata:ro
    command:
      - bash
      - -lc
      - |
        set -e
        pip install --no-cache-dir flask==3.0.3
        python - <<'PY'
        from flask import Flask, jsonify
        from pathlib import Path
        import csv, time
        app = Flask(__name__)
        SWEEP_DIR = Path("/mnt/iqdata/sweeps")
        def latest_lite():
            files = sorted(SWEEP_DIR.glob("sweep_*_lite.csv"))
            return files[-1] if files else None
        @app.get("/peak")
        def peak():
            f = latest_lite()
            if not f:
              return jsonify({"ok": False, "error": "no_lite_files"}), 404
            best = None
            with f.open(newline='') as fh:
              r = csv.reader(fh)
              for row in r:
                if not row or len(row) < 3:
                  continue
                try:
                  peak_hz = float(row[-3]); max_db = float(row[-2]); mean_db = float(row[-1])
                except Exception:
                  continue
                if (best is None) or (max_db > best["max_db"]):
                  best = {"peak_hz": round(peak_hz), "max_db": max_db, "mean_db": mean_db, "file": f.name}
            if not best:
              return jsonify({"ok": False, "error": "parse"}), 500
            best["ok"] = True; best["time"] = int(time.time())
            return jsonify(best)
        app.run(host="0.0.0.0", port=8088)
        PY
