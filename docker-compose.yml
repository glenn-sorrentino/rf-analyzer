services:
  openwebrx:
    image: jketterl/openwebrx-full:latest
    profiles: ["webui"]
    container_name: openwebrx
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    ports: ["8073:8073"]
    volumes:
      - ./openwebrx_data:/var/lib/openwebrx
    restart: unless-stopped
    environment:
      OWX_ADMIN_ENABLED: "true"

  connector:
    image: debian:bookworm-slim
    profiles: ["webui"]
    container_name: owrx-connector
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    network_mode: "service:openwebrx"
    restart: unless-stopped
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        apt-get update -qq
        apt-get install -y -qq curl ca-certificates gnupg
        install -d -m 0755 /usr/share/keyrings
        curl -fsSL https://repo.openwebrx.de/openwebrx.gpg > /usr/share/keyrings/openwebrx.gpg
        echo 'deb [signed-by=/usr/share/keyrings/openwebrx.gpg] https://repo.openwebrx.de/debian/ bookworm main' > /etc/apt/sources.list.d/openwebrx.list
        apt-get update -qq
        apt-get install -y -qq owrx-connector soapysdr-module-hackrf hackrf iproute2
        echo "[connector] starting Soapy connector for HackRF: data :50091, control :35397"
        exec owrx-connector soapy --driver=hackrf --data 0.0.0.0:50091 --control 0.0.0.0:35397
    healthcheck:
      test: ["CMD-SHELL","ss -lnt | grep -q ':35397 '"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  autotuner:
    build:
      context: .
      dockerfile: Dockerfile.autotuner
    profiles: ["webui"]
    depends_on:
      connector:
        condition: service_healthy
    network_mode: "service:openwebrx"
    restart: unless-stopped
    environment:
      SWEEP_URL: "http://100.122.45.119:8088/peak"
      MIN_DB: "-70"
      CONTROL_PORT: "35397"
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        echo "[autotuner] sweep via HTTP; tuning via connector control socket"

        send_try() {
          host="$1"; port="$2"; hz="$3"
          for payload in \
            "FREQ $${hz}\n" \
            "SET FREQ $${hz}\n" \
            "set frequency $${hz}\n" \
            "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\n" \
            "FREQ $${hz}\r\n" \
            "SET FREQ $${hz}\r\n" \
            "set frequency $${hz}\r\n" \
            "{\"cmd\":\"set\",\"key\":\"frequency\",\"value\":$${hz}}\r\n"
          do
            printf '%b' "$${payload}" | timeout 2 socat - TCP4:$${host}:$${port},connect-timeout=2 >/dev/null 2>&1 && return 0
          done
          return 1
        }

        for i in $$(seq 1 60); do ss -lnt | grep -q ':35397 ' && break || sleep 1; done
        echo "[autotuner] control socket: 127.0.0.1:$${CONTROL_PORT}"

        HOST=127.0.0.1
        PORT="$${CONTROL_PORT}"

        while :; do
          resp="$$(curl -fsSL "$${SWEEP_URL}" || true)"
          PHZ="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .peak_hz // empty')"
          PDB="$$(printf "%s" "$${resp}" | jq -r 'select(.ok==true) | .max_db  // empty')"
          if [ -n "$${PHZ}" ] && [ -n "$${PDB}" ] && [ "$$(echo "$${PDB} > $${MIN_DB:- -70}" | bc -l 2>/dev/null || echo 0)" -eq 1 ]; then
            if send_try "$${HOST}" "$${PORT}" "$${PHZ}"; then
              echo "[autotuner] tuned $${HOST}:$${PORT} -> $${PHZ} Hz (peak $${PDB} dB)"
            else
              echo "[autotuner] send failed (no ack from connector)"
            fi
          fi
          sleep 60
        done
