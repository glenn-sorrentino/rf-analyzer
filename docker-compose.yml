services:
  openwebrx:
    image: slechev/openwebrxplus:latest
    container_name: openwebrx
    devices:
      - /dev/bus/usb:/dev/bus/usb
    environment:
      OPENWEBRX_ADMIN_USER: admin
      OPENWEBRX_ADMIN_PASSWORD: STRONG_PASSWORD
    volumes:
      - ./openwebrx_data:/var/lib/openwebrx
    restart: unless-stopped
    profiles: ["ui"]

  hackrf-sweep:
    image: debian:stable-slim
    profiles: ["sweep"]
    privileged: true
    network_mode: host
    restart: unless-stopped
    devices:
      - /dev/bus/usb:/dev/bus/usb
    volumes:
      - /mnt/iqdata:/mnt/iqdata
    command: >
      bash -lc "
        set -euo pipefail;
        export DEBIAN_FRONTEND=noninteractive;
        apt-get update -qq &&
        apt-get install -y --no-install-recommends -qq hackrf coreutils gawk &&
        mkdir -p /mnt/iqdata/sweeps;
        N_KEEP=20160;  # minutes (~14 days)
        while true; do
          ts=$$(date -u +%Y%m%dT%H%M%SZ);
          raw=/mnt/iqdata/sweeps/sweep_$${ts}.csv;
          lite=/mnt/iqdata/sweeps/sweep_$${ts}_lite.csv;
          echo '>> sweep' $$ts;
          # ~100 kHz resolution bins
          timeout 60 hackrf_sweep -f 1:6000 -w 100000 -a 1 -l 32 -g 24 -r $$raw || true;

          # Summarize each 5 MHz slice to: ts,low,high,bin_width,num_bins,peak_hz,peak_db,mean_db
          awk -F', *' '{
            low=$$3+0; high=$$4+0; bw=$$5+0;
            max=-1e9; idx=-1; sum=0; cnt=0;
            for(i=7;i<=NF;i++){v=$$i+0; sum+=v; cnt++; if(v>max){max=v; idx=i-7}}
            if(cnt>0){
              peak_hz=low + (idx+0.5)*bw; mean=sum/cnt;
              printf \"%sT%sZ,%.0f,%.0f,%.2f,%d,%.0f,%.2f,%.2f\\n\", $$1, $$2, low, high, bw, cnt, peak_hz, max, mean;
            }
          }' $$raw > $$lite;

          # keep last ~14 days
          ls -1tr /mnt/iqdata/sweeps/sweep_*.csv | head -n -$$N_KEEP | xargs -r rm -f;
          ls -1tr /mnt/iqdata/sweeps/sweep_*_lite.csv | head -n -$$N_KEEP | xargs -r rm -f;
        done
      "

  hackrf-trigger:
    image: debian:stable-slim
    container_name: hackrf-trigger
    volumes:
      - /mnt/iqdata:/data
    command: >
      bash -lc "
        set -euo pipefail;
        apt-get update -qq &&
        apt-get install -y --no-install-recommends -qq coreutils gawk hackrf;
        mkdir -p /data/watch;
        THRESHOLD=-30;    # dBFS trigger
        rate=8000000;
        while true; do
          latest=$$(ls -1t /data/sweeps/*_lite.csv 2>/dev/null | head -n1 || true);
          [ -z \"$$latest\" ] && sleep 5 && continue;

          peak_line=$$(tail -n1 \"$$latest\");
          peak_hz=$$(echo \"$$peak_line\" | awk -F, '{print $7}');
          peak_db=$$(echo \"$$peak_line\" | awk -F, '{print $8}');

          if [ \"$$peak_hz\" -ge 1600000000 ] && [ \"$$peak_hz\" -le 1700000000 ] && \
             awk "BEGIN{exit !($$peak_db > $$THRESHOLD)}"; then
            ts=$$(date -u +%Y%m%dT%H%M%SZ);
            out=/data/watch/trigger_$${ts}.iq;
            echo \"Trigger! Capturing $$out at $$peak_hz Hz (peak $$peak_db dB)\";
            center=$$peak_hz;
            hackrf_transfer -r - -f $$center -s $$rate -a 1 -l 32 -g 24 -b 10000000 \
              -n $$(( $$rate*2*60 )) > \"$$out\";
          fi
          sleep 5;
        done
      "
    restart: unless-stopped
    profiles: ["trigger"]

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - openwebrx
    restart: unless-stopped
    profiles: ["ui"]
