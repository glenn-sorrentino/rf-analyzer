services:
  openwebrx:
    image: jketterl/openwebrx-full:latest
    profiles: ["webui"]
    container_name: openwebrx
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    ports:
      - "8073:8073"
    volumes:
      - ./openwebrx_data:/var/lib/openwebrx
    restart: unless-stopped
    environment:
      OWX_ADMIN_ENABLED: "true"

  autotuner:
    build:
      context: .
      dockerfile: Dockerfile.autotuner
    profiles: ["webui"]
    depends_on:
      openwebrx:
        condition: service_started
    network_mode: "service:openwebrx"
    restart: unless-stopped
    environment:
      SWEEP_URL: "http://100.122.45.119:8088/peak"
      MIN_DB: "-70"
      CONTROL_PORT: ""   # tuning via socket disabled
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        echo "[autotuner] sweep via HTTP; tuning disabled (no control socket present)"

        # wait for UI to be up
        for i in $(seq 1 30); do
          curl -fsS http://127.0.0.1:8073 >/dev/null 2>&1 && break || sleep 2
        done

        while :; do
          resp="$(curl -fsSL "${SWEEP_URL}" || true)"
          PHZ="$(printf "%s" "${resp}" | jq -r 'select(.ok==true) | .peak_hz // empty')"
          PDB="$(printf "%s" "${resp}" | jq -r 'select(.ok==true) | .max_db  // empty')"

          if [ -n "${PHZ}" ] && [ -n "${PDB}" ]; then
            if [ "$(echo "${PDB} > ${MIN_DB:- -70}" | bc -l 2>/dev/null || echo 0)" -eq 1 ]; then
              echo "[autotuner] candidate frequency ${PHZ} Hz (peak ${PDB} dB)"
            else
              echo "[autotuner] weak peak (${PDB} dB < ${MIN_DB:- -70})"
            fi
          else
            echo "[autotuner] waiting for valid sweep JSON"
          fi
          sleep 60
        done

  sweep-publisher:
    image: python:3.11-slim
    profiles: ["sweep"]
    network_mode: host
    restart: unless-stopped
    volumes:
      - /mnt/iqdata:/mnt/iqdata:ro
    command:
      - bash
      - -lc
      - |
        set -e
        pip install --no-cache-dir flask==3.0.3
        python - <<'PY'
        from flask import Flask, jsonify
        from pathlib import Path
        import csv, time

        app = Flask(__name__)
        SWEEP_DIR = Path("/mnt/iqdata/sweeps")

        def latest_lite():
            files = sorted(SWEEP_DIR.glob("sweep_*_lite.csv"))
            return files[-1] if files else None

        @app.get("/peak")
        def peak():
            f = latest_lite()
            if not f:
              return jsonify({"ok": False, "error": "no_lite_files"}), 404

            best = None
            with f.open(newline='') as fh:
              r = csv.reader(fh)
              for row in r:
                if not row: continue
                if len(row) < 3: continue
                try:
                  peak_hz = float(row[-3])
                  max_db  = float(row[-2])
                  mean_db = float(row[-1])
                except Exception:
                  continue
                if (best is None) or (max_db > best["max_db"]):
                  best = {
                    "peak_hz": round(peak_hz),
                    "max_db": max_db,
                    "mean_db": mean_db,
                    "file": f.name,
                  }

            if not best:
              return jsonify({"ok": False, "error": "parse"}), 500

            best["ok"] = True
            best["time"] = int(time.time())
            return jsonify(best)

        app.run(host="0.0.0.0", port=8088)
        PY
